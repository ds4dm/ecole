project = "Ecole"
# Filled by CMake
copyright = "@Ecole_AUTHORS@"
version = "@Ecole_VERSION_MAJOR@.@Ecole_VERSION_MINOR@"
release = "@Ecole_VERSION@"
author = "@Ecole_AUTHORS@"


extensions = [
    "sphinx.ext.autodoc",  # Read doc from Python docstrings
    "sphinx.ext.viewcode",
]

# Code style
pygments_style = "monokai"

# Theme
extensions += ["sphinx_rtd_theme"]
html_theme = "sphinx_rtd_theme"
html_context = {
    "display_github": True,
    "github_user": "ds4dm",
    "github_repo": "ecole",
    "github_version": "master",  # For the edit on Github link
    "conf_py_path": "/docs/",  # For the edit on Github link
}
html_theme_options = {
    "logo_only": True,
}
html_logo = "static/images/ecole-logo-bare.png"
html_favicon = "static/favicon.ico"
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["static"]
html_style = "css/custom.css"

# Autodoc to read Python docstrings
extensions += ["sphinx.ext.autodoc"]
autodoc_default_options = {
    "members": True,  # Document all members
    "undoc-members": True,
}

# Breathe for Doxygen import
extensions += ["breathe"]
breathe_default_project = "libecole"


# Napoleon write docstrings in Numpy style
extensions += ["sphinx.ext.napoleon"]
napoleon_google_docstring = False
napoleon_numpy_docstring = True


# LaTex configuration (for math)
extensions += ["sphinx.ext.imgmath"]
imgmath_image_format = "svg"
imgmath_latex_preamble = r'''
\DeclareMathOperator*{\argmax}{arg\,max}
\DeclareMathOperator*{\argmin}{arg\,min}
\newcommand\indep{\protect\mathpalette{\protect\independenT}{\perp}}
\def\independenT#1#2{\mathop{\rlap{$#1#2$}\mkern2mu{#1#2}}}
\newcommand\nindep{\protect\mathpalette{\protect\nindependenT}{\perp}}
\def\nindependenT#1#2{\mathop{\rlap{$#1#2$}\mkern2mu{\not#1#2}}}
\newcommand{\overbar}[1]{\mkern 1.5mu\overline{\mkern-1.5mu#1\mkern-1.5mu}\mkern 1.5mu}
'''


# Preprocess docstring to remove "core" from type name
def preprocess_signature(app, what, name, obj, options, signature, return_annotation):
    if signature is not None:
        signature = signature.replace(".core", "")
    if return_annotation is not None:
        return_annotation = return_annotation.replace(".core", "")
    return signature, return_annotation


def setup(app):
    app.connect("autodoc-process-signature", preprocess_signature)
