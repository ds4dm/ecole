"""Setup script for already built extensions.

Extensions are build outside of this script. Here it is assumed extensions are
available with the source code.
"""

import shutil
from pathlib import Path
from setuptools import setup, find_packages, Extension
from setuptools.command.build_ext import build_ext


CURRENT_SRC_DIR = Path(__file__).parent.resolve()


class ExternExtension(Extension):
    """Setuptools extension class for exsisting extensions."""

    def __init__(self, name: str, where: Path = "") -> None:
        """Initialize parent extension class.

        Parameters
        ----------
        name:
            The name (with dots) of the module associated witht the extension.
        where:
            Directory where to find the built extension.

        """
        Extension.__init__(self, name, sources=[])
        self.where = Path(where)


class CopyBuild(build_ext):
    """Build class to copy existing extensions.

    See the following to make an extension that runs cmake:
    https://github.com/pybind/cmake_example/blob/master/setup.py
    """

    def run(self) -> None:
        """Copy all extensions."""
        for ext in self.extensions:
            self.build_extension(ext)

    def build_extension(self, ext: ExternExtension) -> None:
        """Copy a single extension."""
        target_ext = Path(self.get_ext_fullpath(ext.name))
        source_ext = ext.where / target_ext.name

        if not target_ext.parent.exists():
            target_ext.parent.mkdir(parents=True)

        shutil.copyfile(source_ext, target_ext)


# CMake writes list as semi-colon separated values
extension_names = "@Ecole_PYTHON_MODULE_NAMES@".split(";")

extensions = [
    ExternExtension(f"ecole.{m}", where=CURRENT_SRC_DIR / "src/ecole")
    for m in extension_names
]

setup(
    name="ecole",
    author="Antoine Prouvost",
    version="@Ecole_VERSION@",  # Filled my CMake
    url="https://ecole.ai",
    description="Extensible Combinatorial Optimization Learning Environments",
    license="BSD-3-Clause",
    packages=find_packages(CURRENT_SRC_DIR / "src"),
    package_dir={"": str(CURRENT_SRC_DIR / "src")},
    ext_modules=extensions,
    cmdclass=dict(build_ext=CopyBuild),
    zip_safe=False,
)
